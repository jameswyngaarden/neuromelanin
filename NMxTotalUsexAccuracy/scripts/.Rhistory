}
}
#print model matrices
if ((criterr==0) & (matrices==1) & (outscreen==1))
{
cat("\n********************* MODEL DEFINITION MATRICES *********************** \n \n")
cat("FROM variables are columns, TO variables are rows. \n \n")
temp2<-matrix("0",nrow(bcmat),ncol(bcmat))
for (i in c(2:nrow(bcmat)))
{for (j in c(1:(ncol(bcmat)-1)))
{if (bcmat[i,j]==1){temp2[i,j]<-"1"}
if (j >= i){temp2[i,j]<-" "}}
}
temp2<-as.matrix(noquote(temp2[2:nrow(bcmat),(1:(ncol(bcmat)-1))]))
if (nms > 0){cmatlabs<-c(xnames,mnames);rmatlabs<-c(mnames,ynames)}
if (nms==0){cmatlabs<-xnames;rmatlabs<-ynames}
colnames(temp2)<-cmatlabs
rownames(temp2)<-rmatlabs
cat("BMATRIX: Paths freely estimated (1) and fixed to zero (0): \n")
print(temp2)
z<-0
if (sum(wcmat) !=0)
{
temp2<-matrix("0",nrow(wcmat),ncol(wcmat))
for (i in c(2:nrow(wcmat)))
{for (j in c(1:(ncol(wcmat)-1)))
{if (wcmat[i,j]==1){temp2[i,j]<-"1"}
if (j >= i){temp2[i,j]<-" "}}
}
temp2<-as.matrix(noquote(temp2[2:nrow(wcmat),(1:(ncol(wcmat)-1))]))
colnames(temp2)<-cmatlabs
rownames(temp2)<-rmatlabs
cat("\nWMATRIX: Paths moderated (1) and not moderated (0) by W: \n")
print(temp2)
}
if (sum(zcmat) !=0)
{
temp2<-matrix("0",nrow(zcmat),ncol(zcmat))
for (i in c(2:nrow(zcmat)))
{for (j in c(1:(ncol(zcmat)-1)))
{if (zcmat[i,j]==1){temp2[i,j]<-"1"}
if (j >= i){temp2[i,j]<-" "}}
}
temp2<-as.matrix(noquote(temp2[2:nrow(zcmat),(1:(ncol(zcmat)-1))]))
colnames(temp2)<-cmatlabs
rownames(temp2)<-rmatlabs
cat("\nZMATRIX: Paths moderated (1) and not moderated (0) by Z: \n")
print(temp2)
}
if (sum(wzcmat) !=0)
{
temp2<-matrix("0",nrow(wzcmat),ncol(wzcmat))
for (i in c(2:nrow(wzcmat)))
{for (j in c(1:(ncol(wzcmat)-1)))
{if (wzcmat[i,j]==1){temp2[i,j]<-"1"}
if (j >= i){temp2[i,j]<-" "}}
}
temp2<-as.matrix(noquote(temp2[2:nrow(wzcmat),(1:(ncol(wzcmat)-1))]))
colnames(temp2)<-cmatlabs
rownames(temp2)<-rmatlabs
cat("\nWZMATRIX: W moderated paths moderated (1) and not moderated (0) by Z: \n")
print(temp2)
}
if (ncs > 0)
{colnames(ccmat)<-covnames
rownames(ccmat)<-rmatlabs
cat("\nCMATRIX: Covariates (columns) in (1) and not in (0) the models of M and Y (rows): \n")
print(ccmat)
}
}
#end print model matrices
if (criterr==0)
{
resultm<-resultm[2:nrow(resultm),]
bocaj<-matrix(as.numeric(resultm==99999),nrow=nrow(resultm))
bocaj<-(colSums(bocaj)==nrow(resultm))
bocaj<-matrix(1-as.numeric(bocaj))
j<-1
for (i in (1:ncol(resultm)))
{if (bocaj[i,1]==1){resultm[j,1]<-resultm[i,1];j=j+1}}
resultm<-resultm[,1:(j-1)]
resultm[resultm==99999]<-NA
#if (saveest==1)
#{assign("process.results", resultm, envir = .GlobalEnv)}
#if ((outscreen==1) & (saveest==1))
#{
# cat("\n*********************************************************************** \n")
# cat("\nprocess.results matrix saved to the global environment.\n")
# cat("It looks like this but to more significant digits:\n\n")
# print(noquote(matrix(sprintf(decimals,resultm),nrow=nrow(resultm))),right=T)
#}
}
if ((outscreen==1) & (activate==0))
{cat("\n******************** ANALYSIS NOTES AND ERRORS ************************ \n")}
if (activate==1)
{cat("*********************************************************************** \n")}
if ((criterr==0) & (outscreen==1))
{
cat("\nLevel of confidence for all confidence intervals in output: ")
write.table(conf,quote=FALSE,row.names=FALSE,col.names=FALSE)
if (boot>0)
{
if ((goodboot==boot) & (bc==0))
{
cat("\nNumber of bootstraps for percentile bootstrap confidence intervals: ")
write.table(boot,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if ((goodboot==boot) & (bc==1))
{
cat("\nNumber of bootstraps for bias-corrected bootstrap confidence intervals: ")
write.table(boot,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if (length(badend) > 1)
{
cat("\nWARNING: Bootstrap CI endpoints below are not trustworthy. Decrease confidence\n")
cat("or increase the number of bootstrap samples.\n")
badend<-matrix(badend);badend<-t(badend[2:nrow(badend),1])
badend<-noquote(matrix(sprintf(decimals,badend),nrow=nrow(badend)))
write.table(badend,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
}
if (mc > 0)
{
cat("\nNumber of samples for Monte Carlo confidence intervals: ")
write.table(mc,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if ((wnotev > 0) & (printw==1))
{
if (wnotev==1)
{cat("\nW values in conditional tables are the 16th, 50th, and 84th percentiles.\n")}
if ((wnotev==2) & (minwwarn==0) & (maxwwarn==0))
{cat("\nW values in conditional tables are the mean and +/- SD from the mean.\n")}
if (minwwarn==1)
{cat("\nW values in conditional tables are the minimum, the mean, and 1 SD above the mean.\n")}
if (maxwwarn==1)
{cat("\nW values in conditional tables are 1 SD below the mean, the mean, and the maximum.\n")}
}
if ((znotev > 0) & (printz==1))
{
if (znotev==1)
{cat("\nZ values in conditional tables are the 16th, 50th, and 84th percentiles.\n")}
if ((znotev==2) & (minzwarn==0) & (maxzwarn==0))
{cat("\nZ values in conditional tables are the mean and +/- SD from the mean.\n")}
if (minzwarn==1)
{cat("\nZ values in conditional tables are the minimum, the mean, and 1 SD above the mean.\n")}
if (maxzwarn==1)
{cat("\nZ values in conditional tables are 1 SD below the mean, the mean, and the maximum.\n")}
}
if (minwwarn > 0)
{cat("\nNOTE: One SD below the mean is below the minimum observed in the data for W,\n")
cat("      so the minimum measurement on W is used for conditioning instead.\n")}
if (maxwwarn > 0)
{cat("\nNOTE: One SD above the mean is above the maximum observed in the data for W,\n")
cat("      so the maximum measurement on W is used for conditioning instead.\n")}
if (minzwarn > 0)
{cat("\nNOTE: One SD below the mean is below the minimum observed in the data for Z,\n")
cat("      so the minimum measurement on Z is used for conditioning instead.\n")}
if (maxzwarn > 0)
{cat("\nNOTE: One SD above the mean is above the maximum observed in the data for Z,\n")
cat("      so the maximum measurement on Z is used for conditioning instead.\n")}
if (pstog==1)
{cat("\nNOTE: Standardized coefficients for dichotomous or multicategorical X are\n")
cat("      in partially standardized form.\n")}
for (i in c(1:100))
{
if (notecode[i,1]==1)
{cat(" \n")
cat("NOTE: COVMY is ignored when using CMATRIX option. \n")}
if (notecode[i,1]==2)
{cat(" \n")
cat("NOTE: Confidence level restricted to between 50 and 99.9999%. 95% confidence is provided in output. \n")}
if (notecode[i,1]==3)
{cat(" \n")
cat("NOTE: The following variables were mean centered prior to analysis: \n")
centvar<-c("      ", centvar)
centvar<-t(noquote(centvar))
write.table(centvar,quote=FALSE,row.names=FALSE,col.names=FALSE)
}
if (notecode[i,1]==4)
{cat(" \n")
cat("NOTE: A heteroscedasticity consistent standard error and covariance matrix estimator was used. \n")}
if (notecode[i,1]==6)
{cat(" \n")
cat("NOTE: Due to estimation problems, some bootstrap samples had to be replaced. \n")
cat("      The number of times this happened was: ")
write.table(badboot,quote=FALSE,row.names=FALSE,col.names=FALSE)}
if (notecode[i,1]==7)
{cat(" \n")
cat("NOTE: The bootstrapping was not completed due to problematic bootstrap samples. \n")
cat("      Bootstrap confidence intervals are therefore suppressed.\n")}
if (notecode[i,1]==8)
{cat(" \n")
cat("NOTE: The number of bootstrap samples was adjusted upward given your desired confidence. \n")}
if (notecode[i,1]==9)
{cat(" \n")
cat("NOTE: WMODVAL is ignored when W is specified as multicategorical. \n")}
if (notecode[i,1]==10)
{cat(" \n")
cat("NOTE: ZMODVAL is ignored when Z is specified as multicategorical. \n")}
if (notecode[i,1]==11)
{cat(" \n")
cat("NOTE: Total effect model and estimate generated only when all covariates\n")
cat("      are specified in all models of M and Y.\n")}
if (notecode[i,1]==12)
{cat(" \n")
cat("NOTE: Total effect model and estimate generated only when X is freely estimated\n")
cat("      to affect each M and both X and M are freely estimated to affect Y.\n")}
if (notecode[i,1]==13)
{cat(" \n")
cat("NOTE: There are too many pairwise contrasts to conduct with this model. \n")}
if (notecode[i,1]==14)
{cat(" \n")
cat("NOTE: The number of contrast weights must equal the number of indirect effects. \n")}
if (notecode[i,1]==15)
{cat(" \n")
cat("NOTE: Monte Carlo confidence intervals not available for this model. \n")
cat("      Bootstrapping is used instead.\n")}
if (notecode[i,1]==16)
{cat(" \n")
cat("NOTE: The number of Monte Carlo samples was adjusted upward given your desired confidence. \n")}
if (notecode[i,1]==19)
{cat(" \n")
cat("NOTE: Your contrast matrix is invalid or not applicable to this model. \n")}
if (notecode[i,1]==20)
{cat(" \n")
cat("NOTE: One of the groups specified by your contrast matrix does not exist in the data. \n")}
if (notecode[i,1]==24)
{cat(" \n")
cat("NOTE: Total effect model not available with dichotomous Y. \n")}
if (notecode[i,1]==25)
{cat(" \n")
cat("NOTE: Effect size option not available with dichotomous Y. \n")}
if (notecode[i,1]==27)
{cat(" \n")
cat("NOTE: Standardized coefficients not available for models with moderators. \n")}
if (notecode[i,1]==28)
{cat(" \n")
cat("NOTE: The contrast option is not available with a multicategorical X. \n")}
}
if (nmiss > 0)
{cat(" \n")
cat("NOTE: Some cases with missing data were deleted. The number of deleted cases was: ")
write.table(nmiss,quote=FALSE,row.names=FALSE,col.names=FALSE)}
}
if (outscreen==1)
{
# print errors
for (i in c(1:100))
{
if (errcode[i,1]==1)
{cat(" \n")
cat("ERROR: You must specify a Y and an X variable. \n")}
if (errcode[i,1]==2)
{cat(" \n")
cat("ERROR: X, M, or Y variable used more than once or W and Z are the same variable. \n")}
if (errcode[i,1]==3)
{cat(" \n")
cat("ERROR: You have specified more than one variable for W, Y, X, or Z. \n")}
if (errcode[i,1]==4)
{cat(" \n")
cat("ERROR: A variable specified as multicategorical has more than nine categories. \n")}
if (errcode[i,1]==5)
{cat(" \n")
cat("ERROR: One of the categories contains only a single case. \n")}
if (errcode[i,1]==6)
{cat(" \n")
cat("ERROR: Invalid model number in this version of PROCESS. \n")}
if (errcode[i,1]==7)
{cat(" \n")
cat("ERROR: Invalid model number. \n")}
if (errcode[i,1]==8)
{cat(" \n")
cat("ERROR: You must specify an M variable for this model. \n")}
if (errcode[i,1]==9)
{cat(" \n")
cat("ERROR: You have specified an M variable in a model that does not use it. \n")}
if (errcode[i,1]==10)
{cat(" \n")
cat("ERROR: You have specified a W variable in a model that does not use it. \n")}
if (errcode[i,1]==11)
{cat(" \n")
cat("ERROR: You have not specified a W variable in a model that requires it. \n")}
if (errcode[i,1]==12)
{cat(" \n")
cat("ERROR: You have specified a Z variable in a model that does not use it. \n")}
if (errcode[i,1]==13)
{cat(" \n")
cat("ERROR: You have not specified a Z variable in a model that requires it. \n")}
if (errcode[i,1]==15)
{cat(" \n")
cat("ERROR: One of your model variables exhibits no variation (it is a constant). \n")}
if (errcode[i,1]==16)
{cat(" \n")
cat("ERROR: BMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==17)
{cat(" \n")
cat("ERROR: WMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==18)
{cat(" \n")
cat("ERROR: ZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==19)
{cat(" \n")
cat("ERROR: WZMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==20)
{cat(" \n")
cat("ERROR: A path fixed at zero cannot be moderated. \n")}
if (errcode[i,1]==60)
{cat(" \n")
cat("PROCESS is now ready for use.\n")
cat("Copyright 2020 by Andrew F. Hayes ALL RIGHTS RESERVED\n \n")
cat("Distribution of this beta release of PROCESS is prohibited\n")
cat("without written authorization from the copyright holder.\n")}
if (errcode[i,1]==21)
{cat(" \n")
cat("ERROR: If only one moderator is specified, it must be specified as W. \n")}
if (errcode[i,1]==22)
{cat(" \n")
cat("ERROR: In BMATRIX, X must be specified to affect at least one variable. \n")}
if (errcode[i,1]==23)
{cat(" \n")
cat("ERROR: In BMATRIX, at least one variable must be specified to affect Y. \n")}
if (errcode[i,1]==24)
{cat(" \n")
cat("ERROR: You must specify a model number or a custom BMATRIX specification. \n")}
if (errcode[i,1]==25)
{cat(" \n")
cat("ERROR: BMATRIX cannot be used in conjunction with a model number. \n")}
if (errcode[i,1]==26)
{cat(" \n")
cat("ERROR: Your model has a dangling mediator (all Ms must affect and be affected). \n")}
if (errcode[i,1]==29)
{cat(" \n")
cat("ERROR: CMATRIX is not the correct length or is otherwise invalid. \n")}
if (errcode[i,1]==30)
{cat(" \n")
cat("ERROR: In CMATRIX, all covariates must be assigned to an M or a Y. \n")}
if ((errcode[i,1]==31) & (singlr==0))
{cat(" \n")
singlr<-1
cat("ERROR: A linear or near linear dependence (singularity) exists in the data. \n")}
if (errcode[i,1]==32)
{cat(" \n")
cat("ERROR: Models 80 and 81 require between 3 and 6 mediators. \n")}
if (errcode[i,1]==33)
{cat(" \n")
cat("ERROR: Model 82 requires 4 mediators. \n")}
if (errcode[i,1]==34)
{cat(" \n")
cat("ERROR: This model number requires between 2 and 6 mediators. \n")}
if (errcode[i,1]==35)
{cat(" \n")
cat("ERROR: In a model with only one moderator, that moderator must be W. \n")}
if (errcode[i,1]==36)
{cat(" \n")
cat("ERROR: A serial mediation model cannot have more than 6 mediators. \n")}
if (errcode[i,1]==37)
{cat(" \n")
cat("ERROR: No more than 10 mediators are allowed in a PROCESS command. \n")}
if (errcode[i,1]==38)
{cat(" \n")
cat("ERROR: XCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==39)
{cat(" \n")
cat("ERROR: WCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==40)
{cat(" \n")
cat("ERROR: ZCATCODE is not provided, not the correct length, or is otherwise invalid. \n")}
if (errcode[i,1]==41)
{cat(" \n")
cat("ERROR: Models 1, 2, 3, and 74 cannot be customized. \n")}
if (errcode[i,1]==43)
{cat(" \n")
cat("ERROR: PROCESS does not allow dichotomous mediators. \n")}
if (errcode[i,1]==45)
{cat(" \n")
cat("ERROR: In model 74, X and W must be the same variable. \n")}
if (errcode[i,1]==46)
{cat(" \n")
cat("ERROR: Model 74 is temporarily disabled in this release of PROCESS. \n")}
if (errcode[i,1]==50)
{cat(" \n")
cat("ERROR: A multicategorical moderator cannot be specified as a covariate. \n")}
if (errcode[i,1]==51)
{cat(" \n")
cat("ERROR: A variable you specified as a covariate is a moderator in all equations. \n")}
if ((errcode[i,1]==52) & (mcerpt==0))
{mcerpt<-1
cat(" \n")
cat("ERROR: A variable specified as multicategorical must have at least three categories. \n")}
}
}
#if (saveboot==1)
#{resultm<-list(resultm,boots)}
#invisible(resultm)
resultms<-NULL
if ((saveboot==0) & (saveest==1)){resultms<-resultm}
if ((saveboot==1) & (saveest==0)){resultms<-boots}
if ((saveboot==1) & (saveest==1)){resultms<-(list(boots,resultm))}
invisible(resultms)
}
process(activate=1)
process(data = df3, y = "SVSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Script for analyzing social doors NM data
# Jimmy Wyngaarden, July 2021
# set working directory
setwd("~/Documents/GitHub/neuromelanin/NMxAccuracy")
maindir <- getwd()
datadir <- file.path("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/")
# install.packages("readxl")
#install.packages("olsrr")
#install.packages("performance")
#install.packages("ggplot2")
#install.packages("sjPlot")
#install.packages("reshape2")
install.packages("interactions")
# load packages
library("readxl")
library("ggpubr")
library("plot")
library("Hmisc")
library("olsrr")
library("performance")
library("ggplot2")
library("sjPlot")
library("reshape2")
library("interactions")
# import data
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
head(df2)
df3 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects_deceived-only.xlsx")
head(df3)
# Moderation with PROCESS (model 1)
process(data = df3, y = "SVSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Moderation with PROCESS (model 1)
process(data = df3, y = "SDSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Moderation with PROCESS (model 1)
process(data = df3, y = "MDSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Moderation with PROCESS (model 1)
process(data = df3, y = "MVSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Moderation with PROCESS (model 1)
process(data = df3, y = "SVSR_Contrast", x = "Total_Use", w = "NM_full", model = 1)
# Moderation using lm
model = lm(SVSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df3))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
sim_slopes(model, pred = Total_Use , modx = NM_full, jnplot = TRUE, title = "J-N Plot for SDSR_Contrast Model")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Normality checks:
# OLS normality test
ols_test_normality(model)
# shapiro test
shapiro.test(model$residuals)
# ks test
ks.test(model$residuals, "pnorm")
check_normality(model)
check_zeroinflation(model)
# stats for contrast
cor <- cor.test(use, nm, method = "pearson")
cor
# scatter plot for contrast
plot(nm, use, pch=19,
main = "NM Full & Total Substance Use",
xlab = "NM Full Signal",
ylab = "Total Substance Use",
ylim = c(-.4,.3),
col = "blue")
abline(lm(use ~ nm))
# Set Input Variables
use <- df3$Total_Use
nm <- df3$NM_full
# stats for contrast
cor <- cor.test(use, nm, method = "pearson")
cor
# scatter plot for contrast
plot(nm, use, pch=19,
main = "NM Full & Total Substance Use",
xlab = "NM Full Signal",
ylab = "Total Substance Use",
ylim = c(-.4,.3),
col = "blue")
abline(lm(use ~ nm))
df3 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects_deceived-only.xlsx")
head(df3)
# Set Input Variables
use <- df3$Total_Use
nm <- df3$NM_full
# stats for contrast
cor <- cor.test(use, nm, method = "pearson")
cor
# scatter plot for contrast
plot(nm, use, pch=19,
main = "NM Full & Total Substance Use",
xlab = "NM Full Signal",
ylab = "Total Substance Use",
ylim = c(-.4,.3),
col = "blue")
abline(lm(use ~ nm))
# scatter plot for contrast
plot(nm, use, pch=19,
main = "NM Full & Total Substance Use",
xlab = "NM Full Signal",
ylab = "Total Substance Use",
col = "blue")
abline(lm(use ~ nm))
# stats for contrast
cor <- cor.test(use, nm, method = "pearson")
cor
