# scatterplot
plot(df2$NM, df2$MVSL_Contrast,
main = "MVSL: NMvstri & Left Ventral Striatal Activation",
xlab = "NMvstri Signal",
ylab = "Left Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(df2$MVSL_avg ~ df2$NM))
# Script for analyzing social doors NM data
# Jimmy Wyngaarden, July 2021
# set working directory
setwd("~/Documents/GitHub/neuromelanin/NMxAccuracy")
maindir <- getwd()
datadir <- file.path("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/")
# install.packages("readxl")
#install.packages("olsrr")
#install.packages("performance")
#install.packages("ggplot2")
#install.packages("sjPlot")
# load packages
library("readxl")
library("ggpubr")
library("plot")
library("Hmisc")
library("olsrr")
library("performance")
library("ggplot2")
library("sjPlot")
# import data
df1 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova.xlsx")
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
df3 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova3way.xlsx")
# scatterplot
plot(df2$NM, df2$MVSL_Contrast,
main = "MVSL: NMvstri & Left Ventral Striatal Activation",
xlab = "NMvstri Signal",
ylab = "Left Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(df2$MVSL_avg ~ df2$NM))
# scatterplot
plot(df2$NM_vstri, df2$MVSL_Contrast,
main = "MVSL: NMvstri & Left Ventral Striatal Activation",
xlab = "NMvstri Signal",
ylab = "Left Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(df2$MVSL_avg ~ df2$NM_vstri))
MVSL_cor <- cor.test(df2$NM_vstri, df2$MVSL_Contrast, method = "pearson")
MVSL_cor
MVSL_cor <- cor.test(df2$NM_full, df2$MVSL_Contrast, method = "pearson")
MVSL_cor
# scatterplot
plot(df2$NM_full, df2$MVSL_Contrast,
main = "MVSL: NMvstri & Left Ventral Striatal Activation",
xlab = "NM Full Signal",
ylab = "Left Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(df2$MVSL_avg ~ df2$NM_full))
# scatterplot
plot(df2$NM_full, df2$MVSL_Contrast,
main = "MVSL: NMvstri & Left Ventral Striatal Activation",
xlab = "NM Full Signal",
ylab = "Left Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "blue")
abline(lm(df2$MVSL_avg ~ df2$NM_full))
# Striatal contrast & NM
y <- df2$MVSR_Contrast
x <- df2$NM_vstri
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MVSL: NMvstri & Right Ventral Striatal Activation",
xlab = "NM Full Signal",
ylab = "Right Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(y ~ x))
# Striatal contrast & NM
y <- df2$MVSR_Contrast
x <- df2$NM_vstri
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MVSL: NMvstri & Right Ventral Striatal Activation",
xlab = "NMvstri Signal",
ylab = "Right Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(y ~ x))
# Striatal contrast & NM
y <- df2$MVSR_Contrast
x <- df2$NM_full
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MVSR: NM Full & Right Ventral Striatal Activation",
xlab = "NM Full Signal",
ylab = "Right Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "blue")
abline(lm(y ~ x))
# Striatal contrast & NM
y <- df2$MVSR_Contrast
x <- df2$NM_vstri
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MVSR: NMvstri & Right Ventral Striatal Activation",
xlab = "NMvstri Signal",
ylab = "Right Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "green")
abline(lm(y ~ x))
# Striatal contrast & NM
y <- df2$MVSR_Contrast
x <- df2$NM_full
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MVSR: NM Full & Right Ventral Striatal Activation",
xlab = "NM Full Signal",
ylab = "Right Ventral Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "blue")
abline(lm(y ~ x))
# Striatal contrast & NM
y <- df2$MDSL_Contrast
x <- df2$NM_full
cor <- cor.test(x, y, method = "pearson")
cor
# scatterplot
plot(x, y,
main = "MDSL: NM Full & Left Dorsal Striatal Activation",
xlab = "NM Full Signal",
ylab = "Left Dorsal Striatal Activation (Correct > Incorrect)",
ylim = c(-.4,.3),
col = "blue")
abline(lm(y ~ x))
# heatmap of all correlations
ggplot(data = df2, aes(x=Var1, y=Var2, fill=value)) +
geom_tile()
# heatmap of all correlations
ggplot(data = df2) +
geom_tile()
cormat <- round(cor(df2),2)
head(cormat)
df2 <- df2[-1]
cormat <- round(cor(df2),2)
head(cormat)
df2 <- df2[-3]
cormat <- round(cor(df2),2)
head(cormat)
# install.packages("readxl")
#install.packages("olsrr")
#install.packages("performance")
#install.packages("ggplot2")
#install.packages("sjPlot")
install.packages("reshape2")
library("reshape2")
melted_cormat <- (melt(cormat))
head(melted_cormat)
ggplot(data = df2, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
df4 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects2.xlsx")
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
melted_cormat <- (melt(cormat))
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- (melt(cormat))
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "black",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Moderation using lm
model = lm(SVSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MVSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MVSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(SDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(SDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Correlations
# Script for analyzing social doors NM data: specifically, correlations
# Jimmy Wyngaarden, August 2021
# set working directory
setwd("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy")
maindir <- getwd()
datadir <- file.path("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/")
# load packages
library("readxl")
library("ggpubr")
library("ggplot2")
library("reshape2")
# import data
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
head(df2)
model14 <- df2$NM_full, df2$Total_Use
model14 <- [df2$NM_full df2$Total_Use]
