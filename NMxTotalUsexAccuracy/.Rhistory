cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "white")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "black",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# heatmap of all correlations
cormat <- round(cor(df4),2)
head(cormat)
# Get lower triangle of the correlation matrix
get_lower_tri<-function(cormat){
cormat[upper.tri(cormat)] <- NA
return(cormat)
}
# Get upper triangle of the correlation matrix
get_upper_tri <- function(cormat){
cormat[lower.tri(cormat)]<- NA
return(cormat)
}
upper_tri <- get_upper_tri(cormat)
upper_tri
melted_cormat <- melt(upper_tri, na.rm = TRUE)
head(melted_cormat)
ggplot(data = melted_cormat, aes(Var2, Var1, fill = value))+
geom_tile(color = "black")+
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1,1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal()+
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1))+
coord_fixed()
# Moderation using lm
model = lm(SVSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MVSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MVSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(SDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(SDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSL_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# Moderation using lm
model = lm(MDSR_Contrast ~ Total_Use * NM_full,
data=na.omit(df2))
summary(model)
# Plotting simple slopes 10 Aug 2021
interaction <- plot_model(model, type = "int",
mdrt.values = "meansd",
show.data = TRUE)
print(interaction)
# 3-way anova model and model with interaction:
three.way.SVSR <- aov(SVSR ~ NM_full + Acc + Total_Use, data = df1)
interaction.SVSR <- aov(SVSR ~ NM_full * Acc * Total_Use, data = df1)
# print statistics for 3-way anova & interaction
summary(three.way.SVSR)
summary(interaction.SVSR)
# Script for analyzing social doors NM data: NM x Accuracy x Domain
# Jimmy Wyngaarden, August 2021
# set working directory
setwd("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy")
maindir <- getwd()
datadir <- file.path("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/")
# load packages
library("readxl")
library("ggpubr")
library("ggplot2")
library("reshape2")
library("emmeans")
# import data
# use this for 3-way anova:
df1 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova3way.xlsx")
# use this for 2-way analyses (e.g., scatter plots, bar graphs)
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
# use this for 2-way analyses (e.g., scatter plots, bar graphs)
df3 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova.xlsx")
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# Analyses: Does striatal activation vary by NM, Accuracy, or Domain?
# In this script, we're running 3-way anovas for NM x Accuracy x Domain in each of
# the four ROIs. Run the 3-way anova first to determine if the overall model is significant.
# Then plot main effects for each var, followed by interaction (NM x Correct & Incorrect
# in each domain)
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # # #
# anova models
y1 <- df3$MDSL
three.way <- aov(y1 ~ df3$NM_full + df3$Acc)
interaction <- aov(y1 ~ df3$NM_full * df3$Acc)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MDSL
three.way <- aov(y1 ~ df3$NM_vstri + df3$Acc)
interaction <- aov(y1 ~ df3$NM_vstri * df3$Acc)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$VSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$VSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$VSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
y1 <- df1$VSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_full)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_vstri)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$DSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_vstri)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$VSL
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_vstri)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df1$VSR
three.way <- aov(y1 ~ df1$Domain + df1$Acc + df1$NM_vstri)
interaction <- aov(y1 ~ df1$Domain * df1$Acc * df1$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SVSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SVSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# estimated marginal means (EMMs)
(frg <- ref_grid(interaction))
#emmeans(frg, "NM_full")
emmeans(frg, "Acc")
emmeans(frg, "Domain")
# anova models
y1 <- df3$SVSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SDSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SDSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SDSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SDSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SVSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$SVSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MVSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MVSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MDSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MDSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_vstri)
interaction <- aov(y1 ~ df3$Acc * df3$NM_vstri)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MDSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MDSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MVSR
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# anova models
y1 <- df3$MVSL
three.way <- aov(y1 ~ df3$Acc + df3$NM_full)
interaction <- aov(y1 ~ df3$Acc * df3$NM_full)
summary(three.way)
summary(interaction)
# Correlations
# Script for analyzing social doors NM data: specifically, correlations
# Jimmy Wyngaarden, August 2021
# set working directory
setwd("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy")
maindir <- getwd()
datadir <- file.path("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/")
# load packages
library("readxl")
library("ggpubr")
library("ggplot2")
library("reshape2")
# import data
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SVSL, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SVSR_Contrast, method = "pearson")
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$SDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$MVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$MVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$MDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$MDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$CVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$CVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$CDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$CDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$IVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$IVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$IDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_full, df2$IDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$CVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$CVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$CDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$CDSR_Contrast, method = "pearson")
cor
cor <- cor.test(df2$NM_vstri, df2$IVSL_Contrast, method = "pearson")
cor
cor <- cor.test(df2$NM_vstri, df2$IVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$IVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$IDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$IDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$SVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$SVSR_Contrast, method = "pearson")
cor
cor <- cor.test(df2$NM_vstri, df2$SDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$SDSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$MVSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$MVSR_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$MDSL_Contrast, method = "pearson")
cor
# stats for contrast
cor <- cor.test(df2$NM_vstri, df2$MDSR_Contrast, method = "pearson")
cor
# import data
df1 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova.xlsx")
df2 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects.xlsx")
df3 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_anova3way.xlsx")
df4 <- read_excel("~/Documents/GitHub/neuromelanin/NMxTotalUsexAccuracy/data/NMxPositiveAccuracy_maineffects2.xlsx")
head(df2)
summary(df2)
